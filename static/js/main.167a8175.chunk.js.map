{"version":3,"sources":["App.js","serviceWorker.js","index.js","App.module.css"],"names":["App","useState","decodeValue","setDecodeValue","console","log","split","className","styles","Header","as","title","Form","TextArea","placeholder","value","join","onChange","e","Segment","result","textAlign","Divider","map","v","idx","tabs","length","key","style","paddingLeft","replace","footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0TA8CeA,MAxCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,KAGb,OADAC,QAAQC,IAAIH,EAAYI,MAAM,QAE5B,yBAAKC,UAAWC,IAAOR,KACrB,kBAACS,EAAA,EAAD,CAAQC,GAAG,KAAKH,UAAWC,IAAOG,OAAlC,0BAGA,kBAACC,EAAA,EAAD,KACE,0DAAwC,IACxC,kBAACC,EAAA,EAAD,CACEC,YAAY,wBACZC,MAAOb,EAAYc,KACnBC,SAAU,SAACC,EAAD,OAAMH,EAAN,EAAMA,MAAN,OAAkBZ,EAAeY,OAG9Cb,GACC,kBAACiB,EAAA,EAAD,CAASZ,UAAWC,IAAOY,QACzB,kBAACX,EAAA,EAAD,CAAQC,GAAG,KAAKW,UAAU,UAA1B,WAGA,kBAACC,EAAA,EAAD,MACCpB,EAAYI,MAAM,OAAOiB,KAAI,SAACC,EAAGC,GAChC,IACMC,EAAOF,EAAElB,MAAM,OAAOqB,OAAS,EAErC,OACE,yBAAKC,IAAKH,EAAKI,MAAO,CAAEC,YAAY,GAAD,OAJnB,EAIoCJ,EAAjB,QAChCF,EAAEO,QAAQ,OAAQ,IACnB,kCAMV,yBAAKxB,UAAWC,IAAOwB,QAAvB,uBC7BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBElInBC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,mBAAmB,OAAS,oBAAoB,OAAS,uB","file":"static/js/main.167a8175.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { TextArea, Form, Segment, Header, Divider } from \"semantic-ui-react\";\n\nimport styles from \"./App.module.css\";\n\nfunction App() {\n  const [decodeValue, setDecodeValue] = useState(\"\");\n  console.log(decodeValue.split(\"\\\\n\"));\n  return (\n    <div className={styles.App}>\n      <Header as=\"h1\" className={styles.title}>\n        Welcome to \\n decoder\n      </Header>\n      <Form>\n        <strong>Input value to decode:</strong>{\" \"}\n        <TextArea\n          placeholder=\"Input value to decode\"\n          value={decodeValue.join}\n          onChange={(e, { value }) => setDecodeValue(value)}\n        />\n      </Form>\n      {decodeValue && (\n        <Segment className={styles.result}>\n          <Header as=\"h3\" textAlign=\"center\">\n            Result:\n          </Header>\n          <Divider />\n          {decodeValue.split(\"\\\\n\").map((v, idx) => {\n            const tabLength = 4;\n            const tabs = v.split(\"\\\\t\").length - 1;\n\n            return (\n              <div key={idx} style={{ paddingLeft: `${tabLength * tabs}em` }}>\n                {v.replace(/\\\\t/g, \"\")}\n                <br />\n              </div>\n            );\n          })}\n        </Segment>\n      )}\n      <div className={styles.footer}>by Michael Harley</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"title\":\"App_title__-GfWs\",\"result\":\"App_result__3tsSR\",\"footer\":\"App_footer__29Fsv\"};"],"sourceRoot":""}